from pymavlink import mavutil
from .extended_auto_commands import AutoModeCommands

class SendMessages():
    SYS_STATUS = 1 # The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occurred. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occurred it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
    SYSTEM_TIME = 2 # The system time is the time of the master clock, typically the computer clock of the main onboard computer.
    PING = 4 # A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections. The ping microservice is documented at https://mavlink.io/en/services/ping.html
    CHANGE_OPERATOR_CONTROL = 5 # Request to control this MAV
    CHANGE_OPERATOR_CONTROL_ACK = 6 # Accept / deny control of this MAV
    AUTH_KEY = 7 # Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
    LINK_NODE_STATUS = 8 # Status generated in each node in the communication chain and injected into MAVLink stream.
    SET_MODE = 11 # Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
    PARAM_ACK_TRANSACTION = 19 # Response from a PARAM_SET message when it is used in a transaction.
    PARAM_REQUEST_READ = 20 # Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code.
    PARAM_REQUEST_LIST = 21 # Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    PARAM_VALUE = 22 # Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    PARAM_SET = 23 # Set a parameter value (write new value to permanent storage).         The receiving component should acknowledge the new parameter value by broadcasting a PARAM_VALUE message (broadcasting ensures that multiple GCS all have an up-to-date list of all parameters). If the sending GCS did not receive a PARAM_VALUE within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html.         PARAM_SET may also be called within the context of a transaction (started with MAV_CMD_PARAM_TRANSACTION). Within a transaction the receiving component should respond with PARAM_ACK_TRANSACTION to the setter component (instead of broadcasting PARAM_VALUE), and PARAM_SET should be re-sent if this is ACK not received.
    GPS_RAW_INT = 24 # The global position, as returned by the Global Positioning System (GPS). This is                 NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
    GPS_STATUS = 25 # The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.
    SCALED_IMU = 26 # The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
    RAW_IMU = 27 # The RAW IMU readings for a 9DOF sensor, which is identified by the id (default IMU1). This message should always contain the true raw values without any scaling to allow data capture and system debugging.
    RAW_PRESSURE = 28 # The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
    SCALED_PRESSURE = 29 # The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
    ATTITUDE = 30 # The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
    ATTITUDE_QUATERNION = 31 # The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    LOCAL_POSITION_NED = 32 # The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    GLOBAL_POSITION_INT = 33 # The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It                is designed as scaled integer message since the resolution of float is not sufficient.
    RC_CHANNELS_SCALED = 34 # The scaled values of the RC channels received: (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.
    RC_CHANNELS_RAW = 35 # The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    SERVO_OUTPUT_RAW = 36 # Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
    MISSION_REQUEST_PARTIAL_LIST = 37 # Request a partial list of mission items from the system/component. https://mavlink.io/en/services/mission.html. If start and end index are the same, just send one waypoint.
    MISSION_WRITE_PARTIAL_LIST = 38 # This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
    MISSION_ITEM = 39 # Message encoding a mission item. This message is emitted to announce                 the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN may be used to indicate an optional/default value (e.g. to use the system's current latitude or yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    MISSION_REQUEST = 40 # Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/services/mission.html
    MISSION_SET_CURRENT = 41 # Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
    MISSION_CURRENT = 42 # Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.
    MISSION_REQUEST_LIST = 43 # Request the overall list of mission items from the system/component.
    MISSION_COUNT = 44 # This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.
    MISSION_CLEAR_ALL = 45 # Delete all mission items at once.
    MISSION_ITEM_REACHED = 46 # A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
    MISSION_ACK = 47 # Acknowledgment message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
    SET_GPS_GLOBAL_ORIGIN = 48 # Sets the GPS co-ordinates of the vehicle local origin (0,0,0) position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of whether the origin is changed. This enables transform between the local coordinate frame and the global (GPS) coordinate frame, which may be necessary when (for example) indoor and outdoor settings are connected and the MAV should move from in- to outdoor.
    GPS_GLOBAL_ORIGIN = 49 # Publishes the GPS co-ordinates of the vehicle local origin (0,0,0) position. Emitted whenever a new GPS-Local position mapping is requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.
    PARAM_MAP_RC = 50 # Bind a RC channel to a parameter. The parameter should change according to the RC channel value.
    MISSION_REQUEST_INT = 51 # Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html
    MISSION_CHANGED = 52 # A broadcast message to notify any ground station or SDK if a mission, geofence or safe points have changed on the vehicle.
    SAFETY_SET_ALLOWED_AREA = 54 # Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
    SAFETY_ALLOWED_AREA = 55 # Read out the safety zone the MAV currently assumes.
    ATTITUDE_QUATERNION_COV = 61 # The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    NAV_CONTROLLER_OUTPUT = 62 # The state of the navigation and position controller.
    GLOBAL_POSITION_INT_COV = 63 # The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
    LOCAL_POSITION_NED_COV = 64 # The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    RC_CHANNELS = 65 # The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    REQUEST_DATA_STREAM = 66 # Request a data stream.
    DATA_STREAM = 67 # Data stream status information.
    MANUAL_CONTROL = 69 # This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their 
    RC_CHANNELS_OVERRIDE = 70 # The RAW values of the RC channels sent to the MAV to override info received from the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.  Note carefully the semantic differences between the first 8 channels and the subsequent channels
    MISSION_ITEM_INT = 73 # Message encoding a mission item. This message is emitted to announce                 the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    VFR_HUD = 74 # Metrics typically displayed on a HUD for fixed wing aircraft.
    COMMAND_INT = 75 # Message encoding a command with parameters as scaled integers. Scaling depends on the actual command value. NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). The command microservice is documented at https://mavlink.io/en/services/command.html
    COMMAND_LONG = 76 # Send a command with up to seven parameters to the MAV. The command microservice is documented at https://mavlink.io/en/services/command.html
    COMMAND_ACK = 77 # Report status of a command. Includes feedback whether the command was executed. The command microservice is documented at https://mavlink.io/en/services/command.html
    COMMAND_CANCEL = 80 # Cancel a long running command. The target system should respond with a COMMAND_ACK to the original command with result=MAV_RESULT_CANCELLED if the long running process was cancelled. If it has already completed, the cancel action can be ignored. The cancel action can be retried until some sort of acknowledgement to the original command has been received. The command microservice is documented at https://mavlink.io/en/services/command.html
    MANUAL_SETPOINT = 81 # Setpoint in roll, pitch, yaw and thrust from the operator
    SET_ATTITUDE_TARGET = 82 # Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
    ATTITUDE_TARGET = 83 # Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
    SET_POSITION_TARGET_LOCAL_NED = 84 # Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
    POSITION_TARGET_LOCAL_NED = 85 # Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
    SET_POSITION_TARGET_GLOBAL_INT = 86 # Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
    POSITION_TARGET_GLOBAL_INT = 87 # Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
    LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 89 # The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    HIL_STATE = 90 # Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
    HIL_CONTROLS = 91 # Sent from autopilot to simulation. Hardware in the loop control outputs
    HIL_RC_INPUTS_RAW = 92 # Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
    HIL_ACTUATOR_CONTROLS = 93 # Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
    OPTICAL_FLOW = 100 # Optical flow from a flow sensor (e.g. optical mouse sensor)
    GLOBAL_VISION_POSITION_ESTIMATE = 101 # Global position/attitude estimate from a vision source.
    VISION_POSITION_ESTIMATE = 102 # Local position/attitude estimate from a vision source.
    VISION_SPEED_ESTIMATE = 103 # Speed estimate from a vision source.
    VICON_POSITION_ESTIMATE = 104 # Global position estimate from a Vicon motion system source.
    HIGHRES_IMU = 105 # The IMU readings in SI units in NED body frame
    OPTICAL_FLOW_RAD = 106 # Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
    HIL_SENSOR = 107 # The IMU readings in SI units in NED body frame
    SIM_STATE = 108 # Status of simulation environment, if used
    RADIO_STATUS = 109 # Status generated by radio and injected into MAVLink stream.
    FILE_TRANSFER_PROTOCOL = 110 # File transfer message
    TIMESYNC = 111 # Time synchronization message.
    CAMERA_TRIGGER = 112 # Camera-IMU triggering and synchronisation message.
    HIL_GPS = 113 # The global position, as returned by the Global Positioning System (GPS). This is                  NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
    HIL_OPTICAL_FLOW = 114 # Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
    HIL_STATE_QUATERNION = 115 # Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
    SCALED_IMU2 = 116 # The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
    LOG_REQUEST_LIST = 117 # Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called. If there are no log files available this request shall be answered with one LOG_ENTRY message with id = 0 and num_logs = 0.
    LOG_ENTRY = 118 # Reply to LOG_REQUEST_LIST
    LOG_REQUEST_DATA = 119 # Request a chunk of a log
    LOG_DATA = 120 # Reply to LOG_REQUEST_DATA
    LOG_ERASE = 121 # Erase all logs
    LOG_REQUEST_END = 122 # Stop log transfer and resume normal logging
    GPS_INJECT_DATA = 123 # Data for injecting into the onboard GPS (used for DGPS)
    GPS2_RAW = 124 # Second GPS data.
    POWER_STATUS = 125 # Power supply status
    SERIAL_CONTROL = 126 # Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
    GPS_RTK = 127 # RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    GPS2_RTK = 128 # RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    SCALED_IMU3 = 129 # The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
    DATA_TRANSMISSION_HANDSHAKE = 130 # Handshake message to initiate, control and stop image streaming when using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    ENCAPSULATED_DATA = 131 # Data packet for images sent using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    DISTANCE_SENSOR = 132 # Distance sensor information for an onboard rangefinder.
    TERRAIN_REQUEST = 133 # Request for terrain data and terrain status. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    TERRAIN_DATA = 134 # Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    TERRAIN_CHECK = 135 # Request that the vehicle report terrain height at the given location (expected response is a TERRAIN_REPORT). Used by GCS to check if vehicle has all terrain data needed for a mission.
    TERRAIN_REPORT = 136 # Streamed from drone to report progress of terrain map download (initiated by TERRAIN_REQUEST), or sent as a response to a TERRAIN_CHECK request. See terrain protocol docs: https://mavlink.io/en/services/terrain.html
    SCALED_PRESSURE2 = 137 # Barometer readings for 2nd barometer
    ATT_POS_MOCAP = 138 # Motion capture attitude and position
    SET_ACTUATOR_CONTROL_TARGET = 139 # Set the vehicle attitude and body angular rates.
    ACTUATOR_CONTROL_TARGET = 140 # Set the vehicle attitude and body angular rates.
    ALTITUDE = 141 # The current system altitude.
    RESOURCE_REQUEST = 142 # The autopilot is requesting a resource (file, binary, other type of data)
    SCALED_PRESSURE3 = 143 # Barometer readings for 3rd barometer
    FOLLOW_TARGET = 144 # Current motion information from a designated system
    CONTROL_SYSTEM_STATE = 146 # The smoothed, monotonic system state used to feed the control loops of the system.
    BATTERY_STATUS = 147 # Battery information. Updates GCS with flight controller battery status. Smart batteries also use this message, but may additionally send SMART_BATTERY_INFO.
    AUTOPILOT_VERSION = 148 # Version and capability of autopilot software. This should be emitted in response to a request with MAV_CMD_REQUEST_MESSAGE.
    LANDING_TARGET = 149 # The location of a landing target. See: https://mavlink.io/en/services/landing_target.html
    FENCE_STATUS = 162 # Status of geo-fencing. Sent in extended status stream when fencing enabled.
    MAG_CAL_REPORT = 192 # Reports results of completed compass calibration. Sent until MAG_CAL_ACK received.
    EFI_STATUS = 225 # EFI status output
    ESTIMATOR_STATUS = 230 # Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovation test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovation test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
    WIND_COV = 231 # Wind covariance estimate from vehicle.
    GPS_INPUT = 232 # GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the system.
    GPS_RTCM_DATA = 233 # RTCM message for injecting into the onboard GPS (used for DGPS)
    HIGH_LATENCY = 234 # Message appropriate for high latency connections like Iridium
    HIGH_LATENCY2 = 235 # Message appropriate for high latency connections like Iridium (version 2)
    VIBRATION = 241 # Vibration levels and accelerometer clipping
    HOME_POSITION = 242 # This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    SET_HOME_POSITION = 243 # The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    MESSAGE_INTERVAL = 244 # The interval between messages for a particular MAVLink message ID. This message is the response to the MAV_CMD_GET_MESSAGE_INTERVAL command. This interface replaces DATA_STREAM.
    EXTENDED_SYS_STATE = 245 # Provides state for additional features
    ADSB_VEHICLE = 246 # The location and information of an ADSB vehicle
    COLLISION = 247 # Information about a potential collision
    V2_EXTENSION = 248 # Message implementing parts of the V2 payload specs in V1 frames for transitional support.
    MEMORY_VECT = 249 # Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    DEBUG_VECT = 250 # To debug something using a named 3D vector.
    NAMED_VALUE_FLOAT = 251 # Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    NAMED_VALUE_INT = 252 # Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    STATUSTEXT = 253 # Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
    DEBUG = 254 # Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
    SETUP_SIGNING = 256 # Setup a MAVLink2 signing key. If called with secret_key of all zero and zero initial_timestamp will disable signing
    BUTTON_CHANGE = 257 # Report button state change.
    PLAY_TUNE = 258 # Control vehicle tone generation (buzzer).
    CAMERA_INFORMATION = 259 # Information about a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    CAMERA_SETTINGS = 260 # Settings of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    STORAGE_INFORMATION = 261 # Information about a storage medium. This message is sent in response to a request with MAV_CMD_REQUEST_MESSAGE and whenever the status of the storage changes (STORAGE_STATUS). Use MAV_CMD_REQUEST_MESSAGE.param2 to indicate the index/id of requested storage: 0 for all, 1 for first, 2 for second, etc.
    CAMERA_CAPTURE_STATUS = 262 # Information about the status of a capture. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    CAMERA_IMAGE_CAPTURED = 263 # Information about a captured image. This is emitted every time a message is captured. It may be re-requested using MAV_CMD_REQUEST_MESSAGE, using param2 to indicate the sequence number for the missing image.
    FLIGHT_INFORMATION = 264 # Information about flight since last arming.
    MOUNT_ORIENTATION = 265 # Orientation of a mount
    LOGGING_DATA = 266 # A message containing logged data (see also MAV_CMD_LOGGING_START)
    LOGGING_DATA_ACKED = 267 # A message containing logged data which requires a LOGGING_ACK to be sent back
    LOGGING_ACK = 268 # An ack for a LOGGING_DATA_ACKED message
    VIDEO_STREAM_INFORMATION = 269 # Information about video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE, where param2 indicates the video stream id: 0 for all streams, 1 for first, 2 for second, etc.
    VIDEO_STREAM_STATUS = 270 # Information about the status of a video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE.
    CAMERA_FOV_STATUS = 271 # Information about the field of view of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
    CAMERA_TRACKING_IMAGE_STATUS = 275 # Camera tracking status, sent while in active tracking. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.
    CAMERA_TRACKING_GEO_STATUS = 276 # Camera tracking status, sent while in active tracking. Use MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.
    GIMBAL_MANAGER_INFORMATION = 280 # Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
    GIMBAL_MANAGER_STATUS = 281 # Current status about a high level gimbal manager. This message should be broadcast at a low regular rate (e.g. 5Hz).
    GIMBAL_MANAGER_SET_ATTITUDE = 282 # High level message to control a gimbal's attitude. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    GIMBAL_DEVICE_INFORMATION = 283 # Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using MAV_CMD_REQUEST_MESSAGE. The maximum angles and rates are the limits by hardware. However, the limits by software used are likely different/smaller and dependent on mode/settings/etc..
    GIMBAL_DEVICE_SET_ATTITUDE = 284 # Low level message to control a gimbal device's attitude. This message is to be sent from the gimbal manager to the gimbal device component. Angles and rates can be set to NaN according to use case.
    GIMBAL_DEVICE_ATTITUDE_STATUS = 285 # Message reporting the status of a gimbal device. This message should be broadcasted by a gimbal device component. The angles encoded in the quaternion are in the global frame (roll: positive is rolling to the right, pitch: positive is pitching up, yaw is turn to the right). This message should be broadcast at a low regular rate (e.g. 10Hz).
    AUTOPILOT_STATE_FOR_GIMBAL_DEVICE = 286 # Low level message containing autopilot state relevant for a gimbal device. This message is to be sent from the gimbal manager to the gimbal device component. The data of this message server for the gimbal's estimator corrections in particular horizon compensation, as well as the autopilot's control intention e.g. feed forward angular control in z-axis.
    GIMBAL_MANAGER_SET_PITCHYAW = 287 # High level message to control a gimbal's pitch and yaw angles. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    GIMBAL_MANAGER_SET_MANUAL_CONTROL = 288 # High level message to control a gimbal manually. The angles or angular rates are unitless; the actual rates will depend on internal gimbal manager settings/configuration (e.g. set by parameters). This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    ESC_INFO = 290 # ESC information for lower rate streaming. Recommended streaming rate 1Hz. See ESC_STATUS for higher-rate ESC data.
    ESC_STATUS = 291 # ESC information for higher rate streaming. Recommended streaming rate is ~10 Hz. Information that changes more slowly is sent in ESC_INFO. It should typically only be streamed on high-bandwidth links (i.e. to a companion computer).
    WIFI_CONFIG_AP = 299 # Configure WiFi AP SSID, password, and mode. This message is re-emitted as an acknowledgement by the AP. The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE
    AIS_VESSEL = 301 # The location and information of an AIS vessel
    UAVCAN_NODE_STATUS = 310 # General status information of an UAVCAN node. Please refer to the definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the background information. The UAVCAN specification is available at http://uavcan.org.
    UAVCAN_NODE_INFO = 311 # General information describing a particular UAVCAN node. Please refer to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for the background information. This message should be emitted by the system whenever a new node appears online, or an existing node reboots. Additionally, it can be emitted upon request from the other end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not prohibited to emit this message unconditionally at a low frequency. The UAVCAN specification is available at http://uavcan.org.
    PARAM_EXT_REQUEST_READ = 320 # Request to read the value of a parameter with either the param_id string id or param_index. PARAM_EXT_VALUE should be emitted in response.
    PARAM_EXT_REQUEST_LIST = 321 # Request all parameters of this component. All parameters should be emitted in response as PARAM_EXT_VALUE.
    PARAM_EXT_VALUE = 322 # Emit the value of a parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows them to re-request missing parameters after a loss or timeout.
    PARAM_EXT_SET = 323 # Set a parameter value. In order to deal with message loss (and retransmission of PARAM_EXT_SET), when setting a parameter value and the new value is the same as the current value, you will immediately get a PARAM_ACK_ACCEPTED response. If the current state is PARAM_ACK_IN_PROGRESS, you will accordingly receive a PARAM_ACK_IN_PROGRESS in response.
    PARAM_EXT_ACK = 324 # Response from a PARAM_EXT_SET message.
    OBSTACLE_DISTANCE = 330 # Obstacle distances in front of the sensor, starting from the left in increment degrees to the right
    ODOMETRY = 331 # Odometry message to communicate odometry information with an external interface. Fits ROS REP 147 standard for aerial vehicles (http://www.ros.org/reps/rep-0147.html).
    TRAJECTORY_REPRESENTATION_WAYPOINTS = 332 # Describe a trajectory using an array of up-to 5 waypoints in the local frame (MAV_FRAME_LOCAL_NED).
    TRAJECTORY_REPRESENTATION_BEZIER = 333 # Describe a trajectory using an array of up-to 5 bezier control points in the local frame (MAV_FRAME_LOCAL_NED).
    CELLULAR_STATUS = 334 # Report current used cellular network status
    ISBD_LINK_STATUS = 335 # Status of the Iridium SBD link.
    CELLULAR_CONFIG = 336 # Configure cellular modems. This message is re-emitted as an acknowledgement by the modem. The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE.
    RAW_RPM = 339 # RPM sensor data message.
    UTM_GLOBAL_POSITION = 340 # The global position resulting from GPS and sensor fusion.
    DEBUG_FLOAT_ARRAY = 350 # Large debug/prototyping array. The message uses the maximum available payload for data. The array_id and name fields are used to discriminate between messages in code and in user interfaces (respectively). Do not use in production code.
    ORBIT_EXECUTION_STATUS = 360 # Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).
    SMART_BATTERY_INFO = 370 # Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use BATTERY_STATUS for smart battery frequent updates.
    GENERATOR_STATUS = 373 # Telemetry of power generation system. Alternator or mechanical generator.
    ACTUATOR_OUTPUT_STATUS = 375 # The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN, AUX ports). This message supersedes SERVO_OUTPUT_RAW.
    TIME_ESTIMATE_TO_TARGET = 380 # Time/duration estimates for various events and actions given the current vehicle state and position.
    TUNNEL = 385 # Message for transporting "arbitrary" variable-length data from one component to another (broadcast is not forbidden, but discouraged). The encoding of the data is usually extension specific, i.e. determined by the source, and is usually not documented as part of the MAVLink specification.
    ONBOARD_COMPUTER_STATUS = 390 # Hardware status sent by an onboard computer.
    COMPONENT_INFORMATION = 395 # Information about a component. For camera components instead use CAMERA_INFORMATION, and for autopilots additionally use AUTOPILOT_VERSION. Components including GCSes should consider supporting requests of this message via MAV_CMD_REQUEST_MESSAGE.
    PLAY_TUNE_V2 = 400 # Play vehicle tone/tune (buzzer). Supersedes message PLAY_TUNE.
    SUPPORTED_TUNES = 401 # Tune formats supported by vehicle. This should be emitted as response to MAV_CMD_REQUEST_MESSAGE.
    EVENT = 410 # Event message. Each new event from a particular component gets a new sequence number. The same message might be sent multiple times if (re-)requested. Most events are broadcast, some can be specific to a target component (as receivers keep track of the sequence for missed events, all events need to be broadcast. Thus we use destination_component instead of target_component).
    CURRENT_EVENT_SEQUENCE = 411 # Regular broadcast for the current latest event sequence number for a component. This is used to check for dropped events.
    REQUEST_EVENT = 412 # Request one or more events to be (re-)sent. If first_sequence==last_sequence, only a single event is requested. Note that first_sequence can be larger than last_sequence (because the sequence number can wrap). Each sequence will trigger an EVENT or EVENT_ERROR response.
    RESPONSE_EVENT_ERROR = 413 # Response to a REQUEST_EVENT in case of an error (e.g. the event is not available anymore).
    WHEEL_DISTANCE = 9000 # Cumulative distance traveled for each reported wheel.
    WINCH_STATUS = 9005 # Winch status.
    OPEN_DRONE_ID_BASIC_ID = 12900 # Data for filling the OpenDroneID Basic ID message. This and the below messages are primarily meant for feeding data to/from an OpenDroneID implementation. E.g. https://github.com/opendroneid/opendroneid-core-c. These messages are compatible with the ASTM Remote ID standard at https://www.astm.org/Standards/F3411.htm and the ASD-STAN Direct Remote ID standard. The usage of these messages is documented at https://mavlink.io/en/services/opendroneid.html.
    OPEN_DRONE_ID_LOCATION = 12901 # Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.
    OPEN_DRONE_ID_AUTHENTICATION = 12902 # Data for filling the OpenDroneID Authentication message. The Authentication Message defines a field that can provide a means of authenticity for the identity of the UAS (Unmanned Aircraft System). The Authentication message can have two different formats. Five data pages are supported. For data page 0, the fields PageCount, Length and TimeStamp are present and AuthData is only 17 bytes. For data page 1 through 4, PageCount, Length and TimeStamp are not present and the size of AuthData is 23 bytes.
    OPEN_DRONE_ID_SELF_ID = 12903 # Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner.
    OPEN_DRONE_ID_SYSTEM = 12904 # Data for filling the OpenDroneID System message. The System Message contains general system information including the operator location and possible aircraft group information.
    OPEN_DRONE_ID_OPERATOR_ID = 12905 # Data for filling the OpenDroneID Operator ID message, which contains the CAA (Civil Aviation Authority) issued operator ID.
    OPEN_DRONE_ID_MESSAGE_PACK = 12915 # An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above messages descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking.
    
    def send_message(message_id):
        commands = AutoModeCommands()
        commands.mav_cmd_request_message(message_id, 0, 0, 0, 0, 0, 0)